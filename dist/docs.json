{
  "api": {
    "name": "CapacitorUpdaterPlugin",
    "slug": "capacitorupdaterplugin",
    "docs": "",
    "tags": [],
    "methods": [
      {
        "name": "download",
        "signature": "(options: { url: string; }) => Promise<{ version: string; }>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ url: string; }"
          }
        ],
        "returns": "Promise<{ version: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with version name of the downloaded version, version is generated by the plugin, it's a random string of 10 char length"
          },
          {
            "name": "param",
            "text": "url The URL where download the version, it can be S3 github tag or whatever, it should be a zip file"
          }
        ],
        "docs": "Download a new version from the provided URL, it should be a zip file, with files inside or with a unique folder inside with all your files",
        "complexTypes": [],
        "slug": "download"
      },
      {
        "name": "set",
        "signature": "(options: { version: string; versionName?: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ version: string; versionName?: string | undefined; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise when the version is set, if there are no index.html or no version folder throw an error"
          },
          {
            "name": "param",
            "text": "version The version name to set as current version"
          }
        ],
        "docs": "Set version as current version, set will return an error if there are is no index.html file inside the version folder. `versionName` is optional and it's a custom value that will be saved for you",
        "complexTypes": [],
        "slug": "set"
      },
      {
        "name": "getId",
        "signature": "() => Promise<{ id: string; }>",
        "parameters": [],
        "returns": "Promise<{ id: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with id for this device"
          }
        ],
        "docs": "Get unique ID used to identify device into auto update server",
        "complexTypes": [],
        "slug": "getid"
      },
      {
        "name": "getPluginVersion",
        "signature": "() => Promise<{ version: string; }>",
        "parameters": [],
        "returns": "Promise<{ version: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with version for this device"
          }
        ],
        "docs": "Get plugin version used in native code",
        "complexTypes": [],
        "slug": "getpluginversion"
      },
      {
        "name": "delete",
        "signature": "(options: { version: string; }) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ version: string; }"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise when the version is delete, otherwise throw an error"
          },
          {
            "name": "param",
            "text": "version The version name to delete"
          }
        ],
        "docs": "Delete version in storage",
        "complexTypes": [],
        "slug": "delete"
      },
      {
        "name": "list",
        "signature": "() => Promise<{ versions: string[]; }>",
        "parameters": [],
        "returns": "Promise<{ versions: string[]; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise witht the version list"
          }
        ],
        "docs": "Get all available versions",
        "complexTypes": [],
        "slug": "list"
      },
      {
        "name": "reset",
        "signature": "(options?: { toAutoUpdate?: boolean | undefined; } | undefined) => Promise<void>",
        "parameters": [
          {
            "name": "options",
            "docs": "",
            "type": "{ toAutoUpdate?: boolean | undefined; } | undefined"
          }
        ],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an empty Promise"
          },
          {
            "name": "param",
            "text": "toAutoUpdate [false] if yes it reset to to the last AutoUpdate version instead of `builtin`"
          }
        ],
        "docs": "Set the `builtin` version (the one sent to Apple store / Google play store ) as current version",
        "complexTypes": [],
        "slug": "reset"
      },
      {
        "name": "current",
        "signature": "() => Promise<{ current: string; currentNative: string; }>",
        "parameters": [],
        "returns": "Promise<{ current: string; currentNative: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise with the current version name"
          }
        ],
        "docs": "Get the current version, if none are set it returns `builtin`, currentNative is the original version install on the device",
        "complexTypes": [],
        "slug": "current"
      },
      {
        "name": "reload",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise resolved when the view is reloaded"
          }
        ],
        "docs": "Reload the view",
        "complexTypes": [],
        "slug": "reload"
      },
      {
        "name": "versionName",
        "signature": "() => Promise<{ versionName: string; }>",
        "parameters": [],
        "returns": "Promise<{ versionName: string; }>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise witht the current versionName"
          }
        ],
        "docs": "Get the version name, if it was set during the set phase",
        "complexTypes": [],
        "slug": "versionname"
      },
      {
        "name": "notifyAppReady",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise resolved directly"
          }
        ],
        "docs": "Notify native plugin that the update is working, only in auto-update",
        "complexTypes": [],
        "slug": "notifyappready"
      },
      {
        "name": "delayUpdate",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise resolved directly"
          }
        ],
        "docs": "Skip updates in the next time the app goes into the background, only in auto-update",
        "complexTypes": [],
        "slug": "delayupdate"
      },
      {
        "name": "cancelDelay",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [
          {
            "name": "returns",
            "text": "an Promise resolved directly"
          }
        ],
        "docs": "allow update in the next time the app goes into the background, only in auto-update",
        "complexTypes": [],
        "slug": "canceldelay"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'download', listenerFunc: DownloadChangeListener) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'download'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "DownloadChangeListener"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "2.0.11"
          }
        ],
        "docs": "Listen for download event in the App, let you know when the download is started, loading and finished",
        "complexTypes": [
          "PluginListenerHandle",
          "DownloadChangeListener"
        ],
        "slug": "addlistenerdownload"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'majorAvailable', listenerFunc: MajorAvailableListener) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'majorAvailable'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "MajorAvailableListener"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "2.3.0"
          }
        ],
        "docs": "Listen for Major update event in the App, let you know when major update is blocked by setting disableAutoUpdateBreaking",
        "complexTypes": [
          "PluginListenerHandle",
          "MajorAvailableListener"
        ],
        "slug": "addlistenermajoravailable"
      },
      {
        "name": "addListener",
        "signature": "(eventName: 'updateAvailable', listenerFunc: UpdateAvailableListener) => Promise<PluginListenerHandle> & PluginListenerHandle",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "'updateAvailable'"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "UpdateAvailableListener"
          }
        ],
        "returns": "Promise<PluginListenerHandle> & PluginListenerHandle",
        "tags": [
          {
            "name": "since",
            "text": "2.3.0"
          }
        ],
        "docs": "Listen for update event in the App, let you know when update is ready to install at next app start",
        "complexTypes": [
          "PluginListenerHandle",
          "UpdateAvailableListener"
        ],
        "slug": "addlistenerupdateavailable"
      },
      {
        "name": "addListener",
        "signature": "(eventName: string, listenerFunc: (...args: any[]) => any) => Promise<PluginListenerHandle>",
        "parameters": [
          {
            "name": "eventName",
            "docs": "",
            "type": "string"
          },
          {
            "name": "listenerFunc",
            "docs": "",
            "type": "(...args: any[]) => any"
          }
        ],
        "returns": "Promise<PluginListenerHandle>",
        "tags": [],
        "docs": "",
        "complexTypes": [
          "PluginListenerHandle"
        ],
        "slug": "addlistenerstring"
      },
      {
        "name": "removeAllListeners",
        "signature": "() => Promise<void>",
        "parameters": [],
        "returns": "Promise<void>",
        "tags": [],
        "docs": "",
        "complexTypes": [],
        "slug": "removealllisteners"
      }
    ],
    "properties": [],
    "importObject": [
      "PluginListenerHandle",
      "DownloadEvent",
      "MajorAvailableEvent",
      "UpdateAvailableEvent",
      "DownloadChangeListener",
      "MajorAvailableListener",
      "UpdateAvailableListener"
    ]
  },
  "interfaces": [
    {
      "name": "PluginListenerHandle",
      "slug": "pluginlistenerhandle",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "remove",
          "tags": [],
          "docs": "",
          "complexTypes": [],
          "type": "() => Promise<void>"
        }
      ],
      "importObject": [
        "PluginRegistry",
        "CapacitorException",
        "CapacitorGlobal",
        "RegisterPlugin",
        "PluginImplementations",
        "Plugin",
        "PermissionState",
        "PluginResultData",
        "PluginResultError",
        "PluginCallback"
      ]
    },
    {
      "name": "DownloadEvent",
      "slug": "downloadevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "percent",
          "tags": [
            {
              "text": "2.0.11",
              "name": "since"
            }
          ],
          "docs": "Current status of download, between 0 and 100.",
          "complexTypes": [],
          "type": "number"
        }
      ],
      "importObject": [
        "PluginListenerHandle",
        "MajorAvailableEvent",
        "UpdateAvailableEvent",
        "DownloadChangeListener",
        "MajorAvailableListener",
        "UpdateAvailableListener",
        "CapacitorUpdaterPlugin"
      ]
    },
    {
      "name": "MajorAvailableEvent",
      "slug": "majoravailableevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [
            {
              "text": "2.3.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a new major version is available.",
          "complexTypes": [],
          "type": "string"
        }
      ],
      "importObject": [
        "PluginListenerHandle",
        "DownloadEvent",
        "UpdateAvailableEvent",
        "DownloadChangeListener",
        "MajorAvailableListener",
        "UpdateAvailableListener",
        "CapacitorUpdaterPlugin"
      ]
    },
    {
      "name": "UpdateAvailableEvent",
      "slug": "updateavailableevent",
      "docs": "",
      "tags": [],
      "methods": [],
      "properties": [
        {
          "name": "version",
          "tags": [
            {
              "text": "3.0.0",
              "name": "since"
            }
          ],
          "docs": "Emit when a new update is available.",
          "complexTypes": [],
          "type": "string"
        }
      ],
      "importObject": [
        "PluginListenerHandle",
        "DownloadEvent",
        "MajorAvailableEvent",
        "DownloadChangeListener",
        "MajorAvailableListener",
        "UpdateAvailableListener",
        "CapacitorUpdaterPlugin"
      ]
    }
  ],
  "enums": [],
  "typeAliases": [
    {
      "name": "DownloadChangeListener",
      "slug": "downloadchangelistener",
      "docs": "",
      "types": [
        {
          "text": "(state: DownloadEvent): void",
          "complexTypes": [
            "DownloadEvent"
          ]
        }
      ]
    },
    {
      "name": "MajorAvailableListener",
      "slug": "majoravailablelistener",
      "docs": "",
      "types": [
        {
          "text": "(state: MajorAvailableEvent): void",
          "complexTypes": [
            "MajorAvailableEvent"
          ]
        }
      ]
    },
    {
      "name": "UpdateAvailableListener",
      "slug": "updateavailablelistener",
      "docs": "",
      "types": [
        {
          "text": "(state: UpdateAvailableEvent): void",
          "complexTypes": [
            "UpdateAvailableEvent"
          ]
        }
      ]
    }
  ],
  "pluginConfigs": []
}